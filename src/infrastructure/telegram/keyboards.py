"""Inline keyboards for Telegram bot."""
from typing import List, Optional, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from ...core.models.user import Children, UserRole
from ...core.localization import _


class InlineKeyboards:
    """Factory class for creating inline keyboards."""
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """Create main menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('buttons.emotion_translate'), callback_data="emotion_translate"),
                InlineKeyboardButton(_('buttons.weekly_report'), callback_data="view_reports")
            ],
            [
                InlineKeyboardButton(_('buttons.manage_children'), callback_data="manage_children"),
                InlineKeyboardButton(_('buttons.manage_family'), callback_data="manage_family")
            ],
            [
                InlineKeyboardButton(_('buttons.settings'), callback_data="settings"),
                InlineKeyboardButton(_('buttons.help'), callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def child_management() -> InlineKeyboardMarkup:
        """Create child management keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('buttons.add_child'), callback_data="add_child"),
                InlineKeyboardButton(_('buttons.edit_child'), callback_data="edit_child")
            ],
            [
                InlineKeyboardButton(_('buttons.child_reports'), callback_data="child_reports"),
                InlineKeyboardButton(_('buttons.remove_child'), callback_data="remove_child")
            ],
            [
                InlineKeyboardButton(_('buttons.back_main_menu'), callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def children_list(children: List[Children], action: str = "select") -> InlineKeyboardMarkup:
        """Create keyboard with list of children."""
        keyboard = []
        
        for child in children:
            keyboard.append([
                InlineKeyboardButton(
                    f"üë∂ {child.name} ({child.age} {_('common.years')})", 
                    callback_data=f"{action}_child_{child.id}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(_('buttons.back'), callback_data="manage_children")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def emotion_translation_options() -> InlineKeyboardMarkup:
        """Create options for emotion translation."""
        keyboard = [
            [
                InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥", callback_data="emotion_quick"),
                InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="emotion_detailed")
            ],
            [
                InlineKeyboardButton("üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã", callback_data="emotion_history")
            ],
            [
                InlineKeyboardButton(_('buttons.back_main_menu'), callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def emotion_results_actions(translation_id: str) -> InlineKeyboardMarkup:
        """Create actions for emotion translation results."""
        keyboard = [
            [
                InlineKeyboardButton("üìß –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", callback_data=f"share_{translation_id}"),
                InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç—á—ë—Ç", callback_data=f"save_{translation_id}")
            ],
            [
                InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", callback_data="emotion_translate"),
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def response_options(responses: List[dict]) -> InlineKeyboardMarkup:
        """Create keyboard for response options."""
        keyboard = []
        
        for i, response in enumerate(responses):
            keyboard.append([
                InlineKeyboardButton(
                    f"üí° {response['title']}", 
                    callback_data=f"response_option_{i}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def settings_menu() -> InlineKeyboardMarkup:
        """Create settings menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('settings.options.language'), callback_data="settings_language"),
                InlineKeyboardButton(_('settings.options.timezone'), callback_data="settings_timezone")
            ],
            [
                InlineKeyboardButton(_('settings.options.notifications'), callback_data="settings_notifications"),
                InlineKeyboardButton(_('settings.options.subscription'), callback_data="settings_subscription")
            ],
            [
                InlineKeyboardButton(_('settings.options.usage_stats'), callback_data="settings_usage"),
                InlineKeyboardButton(_('settings.options.delete_account'), callback_data="settings_delete")
            ],
            [
                InlineKeyboardButton(_('buttons.back_main_menu'), callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def language_selection() -> InlineKeyboardMarkup:
        """Create language selection keyboard."""
        keyboard = [
            [
                InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en"),
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
            ],
            [
                InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="lang_es"),
                InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="lang_fr")
            ],
            [
                InlineKeyboardButton("üá©üá™ Deutsch", callback_data="lang_de"),
                InlineKeyboardButton("üá®üá≥ ‰∏≠Êñá", callback_data="lang_zh")
            ],
            [
                InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def confirmation(confirm_action: str, cancel_action: str = "main_menu") -> InlineKeyboardMarkup:
        """Create confirmation keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('buttons.confirm'), callback_data=confirm_action),
                InlineKeyboardButton(_('buttons.cancel'), callback_data=cancel_action)
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def family_management() -> InlineKeyboardMarkup:
        """Create family management keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('family.actions.add_member'), callback_data="family_add"),
                InlineKeyboardButton(_('family.actions.view_members'), callback_data="family_list")
            ],
            [
                InlineKeyboardButton(_('family.actions.edit_permissions'), callback_data="family_permissions"),
                InlineKeyboardButton(_('family.actions.remove_member'), callback_data="family_remove")
            ],
            [
                InlineKeyboardButton(_('buttons.back_main_menu'), callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def user_role_selection() -> InlineKeyboardMarkup:
        """Create user role selection keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('family.roles.parent'), callback_data="role_parent"),
                InlineKeyboardButton(_('family.roles.caregiver'), callback_data="role_caregiver")
            ],
            [
                InlineKeyboardButton(_('buttons.back'), callback_data="manage_family")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def reports_menu() -> InlineKeyboardMarkup:
        """Create reports menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('reports.timeframes.this_week'), callback_data="report_week"),
                InlineKeyboardButton(_('reports.timeframes.this_month'), callback_data="report_month")
            ],
            [
                InlineKeyboardButton(_('reports.timeframes.custom'), callback_data="report_custom"),
                InlineKeyboardButton(_('reports.timeframes.trends'), callback_data="report_trends")
            ],
            [
                InlineKeyboardButton(_('reports.children_options.all'), callback_data="report_all"),
                InlineKeyboardButton(_('reports.children_options.specific'), callback_data="report_child_select")
            ],
            [
                InlineKeyboardButton(_('buttons.back_main_menu'), callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def help_menu() -> InlineKeyboardMarkup:
        """Create help menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton("üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", callback_data="help_start"),
                InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="help_faq")
            ],
            [
                InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –∏ —Ö–∏—Ç—Ä–æ—Å—Ç–∏", callback_data="help_tips"),
                InlineKeyboardButton("üìß –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="help_contact")
            ],
            [
                InlineKeyboardButton("üîÑ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", callback_data="help_commands"),
                InlineKeyboardButton("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="help_privacy")
            ],
            [
                InlineKeyboardButton(_('buttons.back_main_menu'), callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_options() -> InlineKeyboardMarkup:
        """Create subscription options keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(_('settings.subscription_options.upgrade_premium'), callback_data="upgrade_premium"),
                InlineKeyboardButton(_('settings.subscription_options.current_usage'), callback_data="usage_stats")
            ],
            [
                InlineKeyboardButton(_('settings.subscription_options.billing_info'), callback_data="billing_info"),
                InlineKeyboardButton(_('settings.subscription_options.cancel_subscription'), callback_data="cancel_subscription")
            ],
            [
                InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def checkin_response_scale() -> InlineKeyboardMarkup:
        """Create mood scale for check-in responses."""
        keyboard = [
            [
                InlineKeyboardButton("üò¢ 1", callback_data="mood_1"),
                InlineKeyboardButton("üòû 2", callback_data="mood_2"),
                InlineKeyboardButton("üòê 3", callback_data="mood_3"),
                InlineKeyboardButton("üòä 4", callback_data="mood_4"),
                InlineKeyboardButton("üòÑ 5", callback_data="mood_5")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def gender_selection() -> InlineKeyboardMarkup:
        """Create gender selection keyboard for child registration."""
        keyboard = [
            [
                InlineKeyboardButton("üë¶ Boy", callback_data="gender_boy"),
                InlineKeyboardButton("üëß Girl", callback_data="gender_girl")
            ],
            [
                InlineKeyboardButton("ü§∑ Prefer not to say", callback_data="gender_none"),
                InlineKeyboardButton("‚è≠Ô∏è Skip", callback_data="skip_gender")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def skip_optional() -> InlineKeyboardMarkup:
        """Create skip button for optional fields."""
        keyboard = [
            [
                InlineKeyboardButton(_('buttons.skip'), callback_data="skip_optional"),
                InlineKeyboardButton(_('buttons.back'), callback_data="back")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)